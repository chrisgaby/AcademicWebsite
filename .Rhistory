document_type == "InProceedings" ~ "1",
document_type == "Proceedings" ~ "1",
document_type == "Conference" ~ "1",
document_type == "Conference Paper" ~ "1",
document_type == "MastersThesis" ~ "3",
document_type == "PhdThesis" ~ "3",
document_type == "Manual" ~ "4",
document_type == "TechReport" ~ "4",
document_type == "Book" ~ "5",
document_type == "InCollection" ~ "6",
document_type == "InBook" ~ "6",
document_type == "Misc" ~ "0",
TRUE ~ "0"))
# create a function which populates the md template based on the info
# about a publication
create_md <- function(x) {
# define a date and create filename by appending date and start of title
if (!is.na(x[["year"]])) {
x[["date"]] <- paste0(x[["year"]], "-01-01")
} else {
x[["date"]] <- "2999-01-01"
}
filename <- paste(x[["date"]], x[["title"]] %>%
str_replace_all(fixed(" "), "_") %>%
str_remove_all(fixed(":")) %>%
str_sub(1, 20) %>%
paste0(".md"), sep = "_")
# start writing
if (!file.exists(file.path(outfold, filename)) | overwrite) {
fileConn <- file.path(outfold, filename)
write("+++", fileConn)
# Title and date
write(paste0("title = \"", x[["title"]], "\""), fileConn, append = T)
write(paste0("date = \"", anydate(x[["date"]]), "\""), fileConn, append = T)
# Authors. Comma separated list, e.g. `["Bob Smith", "David Jones"]`.
auth_hugo <- str_replace_all(x["author"], " and ", "\", \"")
auth_hugo <- stringi::stri_trans_general(auth_hugo, "latin-ascii")
write(paste0("authors = [\"", auth_hugo,"\"]"), fileConn, append = T)
# Publication type. Legend:
# 0 = Uncategorized, 1 = Conference paper, 2 = Journal article
# 3 = Manuscript, 4 = Report, 5 = Book,  6 = Book section
write(paste0("publication_types = [\"", x[["pubtype"]],"\"]"),
fileConn, append = T)
# Publication details: journal, volume, issue, page numbers and doi link
publication <- x[["journal"]]
if (!is.na(x[["volume"]])) publication <- paste0(publication,
", (", x[["volume"]], ")")
if (!is.na(x[["number"]])) publication <- paste0(publication,
", ", x[["number"]])
if (!is.na(x[["pages"]])) publication <- paste0(publication,
", _pp. ", x[["pages"]], "_")
if (!is.na(x[["doi"]])) publication <- paste0(publication,
", ", paste0("https://doi.org/",
x[["doi"]]))
write(paste0("publication = \"", publication,"\""), fileConn, append = T)
write(paste0("publication_short = \"", publication,"\""),fileConn, append = T)
# Abstract and optional shortened version.
if (abstract) {
write(paste0("abstract = \"", x[["abstract"]],"\""), fileConn, append = T)
} else {
write("abstract = \"\"", fileConn, append = T)
}
write(paste0("abstract_short = \"","\""), fileConn, append = T)
# other possible fields are kept empty. They can be customized later by
# editing the created md
write("image_preview = \"\"", fileConn, append = T)
write("selected = false", fileConn, append = T)
write("projects = []", fileConn, append = T)
write("tags = []", fileConn, append = T)
#links
write("url_pdf = \"\"", fileConn, append = T)
write("url_preprint = \"\"", fileConn, append = T)
write("url_code = \"\"", fileConn, append = T)
write("url_dataset = \"\"", fileConn, append = T)
write("url_project = \"\"", fileConn, append = T)
write("url_slides = \"\"", fileConn, append = T)
write("url_video = \"\"", fileConn, append = T)
write("url_poster = \"\"", fileConn, append = T)
write("url_source = \"\"", fileConn, append = T)
#other stuff
write("math = true", fileConn, append = T)
write("highlight = true", fileConn, append = T)
# Featured image
write("[header]", fileConn, append = T)
write("image = \"\"", fileConn, append = T)
write("caption = \"\"", fileConn, append = T)
write("+++", fileConn, append = T)
}
}
# apply the "create_md" function over the publications list to generate
# the different "md" files.
apply(mypubs, FUN = function(x) create_md(x), MARGIN = 1)
}
my_bibfile <- "/home/chrisgaby/Documents/myrefs.bib"
out_fold   <- "/home/chrisgaby/Documents/"
bibtex_2academic(bibffile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
bibtex_2academic(bibffile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
my_bibfile
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
install.packages("RefManageR")
install.packages("dplyr")
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
install.packages("anytime")
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
my_bibfile <- "/home/chrisgaby/Documents/test_mendeley.bib"
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
bibtex_2academic(bibfile  = my_bibfile,
outfold   = out_fold,
abstract  = FALSE)
blogdown::hugo_version()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
getwd()
blogdown::serve_site()
library(tidyverse)
prokaryote.genomes.table <- read_csv(file = "prokaryotes.csv")
head(prokaryote.genomes.table)
prokaryote.genomes.table[prokaryote.genomes.table$`Size(Mb)` == max(prokaryote.genomes.table$`Size(Mb)`),]
prokaryote.genomes.table$`#Organism Name`[prokaryote.genomes.table$`Size(Mb)` == max(prokaryote.genomes.table$`Size(Mb)`),]
prokaryote.genomes.table[prokaryote.genomes.table$`Size(Mb)` == max(prokaryote.genomes.table$`Size(Mb)`),1]
prokaryote.genomes.table[prokaryote.genomes.table$`# Organism Name` == "Escherichia coli",]
prokaryote.genomes.table[prokaryote.genomes.table$`#Organism Name` == "Escherichia coli",]
prokaryote.genomes.table[1,]
prokaryote.genomes.table[2,]
prokaryote.genomes.table[3,]
prokaryote.genomes.table[3,1]
prokaryote.genomes.table[prokaryote.genomes.table$`#Organism Name` == "Escherichia coli K12",]
grep("coli", prokaryote.genomes.table)
prokaryote.genomes.table[15,1]
prokaryote.genomes.table[16,1]
grep("Yersinia", prokaryote.genomes.table)
grep("K12", prokaryote.genomes.table)
prokaryote.genomes.table[3,1]
?grep
grep("Yersinia", prokaryote.genomes.table, fixed = TRUE)
prokaryote.genomes.table[1,1]
prokaryote.genomes.table[3,1]
grep("Yersinia", prokaryote.genomes.table)
prokaryote.genomes.table[1,1]
prokaryote.genomes.table[2,1]
which(prokaryote.genomes.table == "coli", arr.ind = TRUE)
which(as.data.frame(prokaryote.genomes.table) == "coli", arr.ind = TRUE)
which(as.data.frame(prokaryote.genomes.table$`#Organism Name`) == "coli", arr.ind = TRUE)
which(prokaryote.genomes.table$`#Organism Name` == "coli", arr.ind = TRUE)
which(prokaryote.genomes.table$`#Organism Name` == "Yersinia", arr.ind = TRUE)
which(prokaryote.genomes.table$`#Organism Name` == "Yersinia")
which(prokaryote.genomes.table$`#Organism Name` == "pestis")
prokaryote.genomes.table[[1]][grep("coli",prokaryote.genomes.table[[1]])]
prokaryote.genomes.table[[1]][grep(" coli",prokaryote.genomes.table[[1]])]
prokaryote.genomes.table[[1]][grep(" coli K12",prokaryote.genomes.table[[1]])]
prokaryote.genomes.table[[1]][grep("K12",prokaryote.genomes.table[[1]])]
prokaryote.genomes.table[[1]][grep("Escherichia",prokaryote.genomes.table[[1]])]
?new_post
library(blogdown)
?new_post
blogdown::new_post(title = "Prokaryotic Genome Size", kind = post, author = "John Christian Gaby", ext = '.Rmd')
blogdown::new_post(title = "Prokaryotic Genome Size", kind = 'post', author = "John Christian Gaby", ext = '.Rmd')
blogdown::serve_site()
prokaryote.genomes.table.split
library(tidyr)
# Split the Organism Groups column into new columns named according to their respective taxonomy level
prokaryote.genomes.table.split <- separate(data=prokaryote.genomes.table,
col = `Organism Groups`,
sep = ";",
into = c("Domain", "Phylum", "Class"))
summary(factor(prokaryote.genomes.table.split$Phylum))
prokaryote.genomes.table.split
qplot(date = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Domain)
library(ggplot2)
qplot(date = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Domain)
library(tidyverse)
prokaryote.genomes.table <- read_csv(file = "prokaryotes.csv")
head(prokaryote.genomes.table)
library(ggplot2)
qplot(data = prokaryote.genomes.table,
x = `Size(Mb)`,
binwidth = 1, )
library(tidyr)
# Split the Organism Groups column into new columns named according to their respective taxonomy level
prokaryote.genomes.table.split <- separate(data=prokaryote.genomes.table,
col = `Organism Groups`,
sep = ";",
into = c("Domain", "Phylum", "Class"))
summary(factor(prokaryote.genomes.table.split$Phylum))
library(ggplot2)
phyla.subset.names <- names(which(summary(factor(prokaryote.genomes.table.split$Phylum)) > 90))
prokaryote.genomes.table.split.reduced <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == phyla.subset.names[1] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[2] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[3] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[4] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[5] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[6],]
qplot(data=prokaryote.genomes.table.split.reduced,
x = `Size(Mb)`,
geom = "density",
color = Phylum,
fill = Phylum,
alpha = I(0.2))
library(ggplot2)
qplot(data=prokaryote.genomes.table.split.reduced,
x = `Size(Mb)`,
geom = "density",
color = Phylum,
fill = Phylum,
facets = Phylum ~ .)
library(ggplot2)
qplot(date = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Domain)
library(ggplot2)
qplot(date = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Domain)
library(ggplot2)
qplot(date = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Domain)
library(ggplot2)
qplot(date = prokaryote.genomes.table.split, x = Size(Mb), y = CDS, color = Domain)
library(ggplot2)
qplot(date = prokaryote.genomes.table.split, x = 'Size(Mb)', y = CDS, color = Domain)
library(ggplot2)
qplot(date = prokaryote.genomes.table.split, x = 'Size(Mb)', y = 'CDS', color = Domain)
library(ggplot2)
qplot(date = prokaryote.genomes.table.split, x = 'Size(Mb)', y = 'CDS', color = 'Domain')
library(ggplot2)
qplot(data = prokaryote.genomes.table.split, x = 'Size(Mb)', y = 'CDS', color = 'Domain')
library(ggplot2)
qplot(data = prokaryote.genomes.table.split, x = 'Size(Mb)', y = CDS, color = Domain)
library(ggplot2)
qplot(data = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Domain)
library(ggplot2)
qplot(data = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Domain, alpha = I(0.2))
library(ggplot2)
qplot(data = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Domain, alpha = I(0.02))
library(ggplot2)
qplot(data = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Domain, alpha = I(0.1))
library(ggplot2)
qplot(data = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Domain, alpha = I(0.5))
library(ggplot2)
qplot(data = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Domain, alpha = I(0.2))
prokaryote.genomes.table
library(ggplot2)
qplot(data = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Level, alpha = I(0.2))
prokaryote.genomes.table.split
library(ggplot2)
qplot(data = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Phylum, alpha = I(0.2))
library(ggplot2)
qplot(data = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Phylum, alpha = I(0.5))
library(ggplot2)
qplot(data = prokaryote.genomes.table.split, x = `Size(Mb)`, y = CDS, color = Level, alpha = I(0.4))
blogdown::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(blogdown)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("blogdown")
install.packages("blogdown")
version("blogdown")
version()
version
library(blogdown)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
getwd()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
library(tidyverse)
prokaryote.genomes.table <- read_csv(file = "prokaryotes.csv")
head(prokaryote.genomes.table)
summary(prokaryote.genomes.table$`Size(Mb)`)
# Display the minimum, maximum, mean, median, and 1st and 3rd quartiles for the genome sizes.
summary(prokaryote.genomes.table$`Size(Mb)`)
# How many genomes have data for length?
length(prokaryote.genomes.table$`Size(Mb)`)
# Display the minimum, maximum, mean, median, and 1st and 3rd quartiles for the genome sizes.
summary(prokaryote.genomes.table$`Size(Mb)`)
library(tidyverse)
# Read the table into
prokaryote.genomes.table <- read_csv(file = "prokaryotes.csv")
# Display the first few lines of the data frame.
head(prokaryote.genomes.table)
# How many genomes have data for length?
length(prokaryote.genomes.table$`Size(Mb)`)
# Display the minimum, maximum, mean, median, and 1st and 3rd quartiles for the genome sizes.
summary(prokaryote.genomes.table$`Size(Mb)`)
?blogdown
library(blogdown)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
library(tidyverse)
# Read the table into
prokaryote.genomes.table <- read_csv(file = "prokaryotes.csv")
# Display the first few lines of the data frame.
head(prokaryote.genomes.table)
# How many genomes have data for length?
length(prokaryote.genomes.table$`Size(Mb)`)
# Display the minimum, maximum, mean, median, and 1st and 3rd quartiles for the genome sizes.
summary(prokaryote.genomes.table$`Size(Mb)`)
library(tidyverse)
# Read the table into
prokaryote.genomes.table <- read_csv(file = "/files/prokaryotes.csv")
library(tidyverse)
# Read the table into
prokaryote.genomes.table <- read_csv(file = "prokaryotes.csv")
# Display the first few lines of the data frame.
head(prokaryote.genomes.table)
# How many genomes have data for length?
length(prokaryote.genomes.table$`Size(Mb)`)
# Display the minimum, maximum, mean, median, and 1st and 3rd quartiles for the genome sizes.
summary(prokaryote.genomes.table$`Size(Mb)`)
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::new_post(title = "Prokaryotic Genome Weight", kind = 'post', author = "John Christian Gaby", ext = '.Rmd')
blogdown::serve_site()
head(prokaryote.genomes.table)
library(ggplot2)
library(tidyverse)
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "prokaryotes.csv")
# Display the minimum, maximum, mean, median, and 1st and 3rd quartiles for the genome sizes.
summary(prokaryote.genomes.table$`GC%`)
blogdown::serve_site()
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "adenine.pdb")
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "../../static/files/adenine.pdb")
library(tidyverse)
# Read the table into a tibble.
prokaryote.genomes.table <- read_tsv(file = "../../static/files/adenine.pdb")
library(tidyverse)
# Read the table into a tibble.
prokaryote.genomes.table <- read_delim(file = "../../static/files/adenine.pdb", delim = " ")
# Read the table into a tibble.
adenine <- read_delim(file = "../../static/files/adenine.pdb", delim = " ")
adenine
# Read the table into a tibble.
adenine <- read_delim(file = "../../static/files/adenine.pdb", delim = " ", col_names = FALSE)
adenine
adenine[,10]
adenine[,11]
?read_table
# Read the table into a tibble.
adenine <- read_table2(file = "../../static/files/adenine.pdb", col_names = FALSE)
adenine[,10]
adenine[,11]
library(tidyverse)
# Read the table into a tibble.
adenine <- read_table2(file = "../../static/files/adenine.pdb", col_names = FALSE, skip = 1)
adenine
adenine[,12]
adenine[,12]
adenine[nrow(adenine)-1,12]
adenine[seq(1,(nrow(adenine)-1)),12]
# Remove the last row that only contains "end".
A.atoms <- adenine[seq(1,(nrow(adenine)-1)),12]
A.atoms
summary(A.atoms)
table(A.atoms)
library(tidyverse)
# Read the adenine PDB file into a tibble, skipping the first row that causes the column of interest to be missed.
adenine <- read_table2(file = "../../static/files/adenine.pdb",
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
A.atoms <- adenine[seq(1,(nrow(adenine)-1)),12]
# Make a table with the total number of atoms of each type.
table(A.atoms)
library(tidyverse)
# Read the adenine PDB file into a tibble, skipping the first row that causes the column of interest to be missed.
adenine <- read_table2(file = "../../static/files/adenine.pdb",
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
A.atoms <- adenine[seq(1,(nrow(adenine)-1)),12]
# Make a table with the total number of atoms of each type.
table(A.atoms)
library(tidyverse)
# Read the adenine PDB file into a tibble, skipping the first row that causes the column of interest to be missed.
adenine <- read_table2(file = "../../static/files/adenine.pdb",
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
A.atoms <- adenine[seq(1,(nrow(adenine)-1)),12]
# Make a table with the total number of atoms of each type.
table(A.atoms)
library(tidyverse)
# Read the adenine PDB file into a tibble, skipping the first row that causes the column of interest to be missed.
adenine <- read_table2(file = "../../static/files/adenine.pdb",
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
A.atoms <- adenine[seq(1,(nrow(adenine)-1)),12]
# Make a table with the total number of atoms of each type.
table(A.atoms)
library(tidyverse)
# Read the adenine PDB file into a tibble, skipping the first row that causes the column of interest to be missed.
adenine <- read_table2(file = "../../static/files/adenine.pdb",
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
A.atoms <- adenine[seq(1,(nrow(adenine)-1)),12]
# Make a table with the total number of atoms of each type.
table(A.atoms)
table(A.atoms)
A.table <- table(A.atoms)
A.table
A.table[1,1]
A.table[1]
A.table[2]
class(A.table)
as.data.frame(A.table)[1,1]
as.data.frame(A.table)[1,2]
as.data.frame(A.table)[2,2]
as.data.frame(A.table)
# Make a table with the total number of atoms of each type.
A.table <- table(A.atoms)
A.df <- as.data.frame(A.table)
A.df
A.df
cbind(A.df, c("MW", 12, 1, 14))
cbind(A.df, c(12, 1, 14))
cbind(A.df, "MW" = c(12, 1, 14))
install.packages("PeriodicTable")
library(PeriodicTable)
?periodicTable
PeriodicTable
periodicTable
PeriodicTable::mass(C,N)
PeriodicTable::mass(C)
PeriodicTable::mass("C")
PeriodicTable::mass("C", "N")
PeriodicTable::mass(c("C", "N"))
PeriodicTable::mass("C")
PeriodicTable::mass(A.df[1:3,1])
PeriodicTable::mass(A.df[1:nrow(A.df),1])
cbind(A.df, MW = PeriodicTable::mass(A.df[1:nrow(A.df),1]))
cbind(A.df, c(MW = PeriodicTable::mass(A.df[1:nrow(A.df),1]), MW.tot = A.df[,2]*A.df[,3]))
cbind(A.df, c(MW = PeriodicTable::mass(A.df[1:nrow(A.df),1]), MW.tot = (A.df[,2]*A.df[,3])))
A.df[,2]*A.df[,3]
A.df[,2]
cbind(A.df, c(MW = PeriodicTable::mass(A.df[1:nrow(A.df),1])))
cbind(A.df, MW = PeriodicTable::mass(A.df[1:nrow(A.df),1]))
A.df2[,2] * A.df2[,3]
A.df2 <- cbind(A.df, MW = PeriodicTable::mass(A.df[1:nrow(A.df),1]))
A.df2 <- cbind(A.df, MW = PeriodicTable::mass(A.df[1:nrow(A.df),1]))
A.df2[,2] * A.df2[,3]
A.df3 <- cbind(A.df2, MW.tot = A.df2[,2] * A.df2[,3])
A.df3
sum(A.df3[,4])
sum(A.df3[,"MW.tot"])
library(PeriodicTable)
# Change to a data frame.
A.df <- as.data.frame(A.table)
# Add a 3rd column that is the atomic mass of each element.
A.df2 <- cbind(A.df, MW = PeriodicTable::mass(A.df[1:nrow(A.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
A.df3 <- cbind(A.df2, MW.tot = A.df2[,2] * A.df2[,3])
A.df3
sum(A.df3[,"MW.tot"])
