paste0("../../static/files/","adenine.pdb")
nucMolarMass <- function(PDBfile)
{
nuc <- read_table2(file = paste0("../../static/files/",as.chracter(PDBfile)),
col_names = FALSE,
skip = 1)
nuc
}
nucMolarMass(adenine.pdb)
nucMolarMass <- function(PDBfile)
{
nuc <- read_table2(file = paste0("../../static/files/",as.character(PDBfile)),
col_names = FALSE,
skip = 1)
nuc
}
nucMolarMass(adenine.pdb)
filename = selectFile()
nucMolarMass <- function()
{
filename = selectFile()
nuc <- read_table2(file = paste0("../../static/files/",as.character(filename)),
col_names = FALSE,
skip = 1)
nuc
}
nucMolarMass(adenine.pdb)
nucMolarMass("adenine.pdb")
nucMolarMass <- function(filename)
{
nuc <- read_table2(file = paste0("../../static/files/",as.character(filename)),
col_names = FALSE,
skip = 1)
nuc
}
nucMolarMass <- function(filename)
{
nuc <- read_table2(file = paste0("../../static/files/",as.character(filename)),
col_names = FALSE,
skip = 1)
nuc
}
nucMolarMass("adenine.pdb")
nucMolarMass <- function(filename)
{
nuc <- read_table2(file = paste0("./static/files/",as.character(filename)),
col_names = FALSE,
skip = 1)
nuc
}
nucMolarMass("adenine.pdb")
nucMolarMass(adenine.pdb)
nucMolarMass <- function(filename)
{
nuc <- read_table2(file = paste0("./static/files/",filename),
col_names = FALSE,
skip = 1)
nuc
}
nucMolarMass("adenine.pdb")
library(tidyverse)
library(PeriodicTable)
nucMolarMass <- function(filename)
{
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
nuc <- read_table2(file = paste0("./static/files/",filename),
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
nuc.atoms <- nuc[seq(1,(nrow(nuc)-1)),12]
# Make a table with the total number of atoms of each type.
nuc.table <- table(nuc.atoms)
nuc.table
# Change to a data frame.
nuc.df <- as.data.frame(nuc.table)
# Add a 3rd column that is the atomic mass of each element.
nuc.df2 <- cbind(nuc.df, MW = PeriodicTable::mass(nuc.df[1:nrow(nuc.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
nuc.df3 <- cbind(nuc.df2, MW.tot = nuc.df2[,2] * nuc.df2[,3])
nuc.df3
sum(nuc.df3[,"MW.tot"])
}
nucMolarMass("adenine.pdf")
library(tidyverse)
library(PeriodicTable)
nucMolarMass <- function(filename)
{
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
nuc <- read_table2(file = paste0("./static/files/",filename),
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
nuc.atoms <- nuc[seq(1,(nrow(nuc)-1)),12]
# Make a table with the total number of atoms of each type.
nuc.table <- table(nuc.atoms)
nuc.table
# Change to a data frame.
nuc.df <- as.data.frame(nuc.table)
# Add a 3rd column that is the atomic mass of each element.
nuc.df2 <- cbind(nuc.df, MW = PeriodicTable::mass(nuc.df[1:nrow(nuc.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
nuc.df3 <- cbind(nuc.df2, MW.tot = nuc.df2[,2] * nuc.df2[,3])
nuc.df3
sum(nuc.df3[,"MW.tot"])
}
nucMolarMass("adenine.pdf")
library(tidyverse)
library(PeriodicTable)
nucMolarMass <- function(filename)
{
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
nuc <- read_table2(file = paste0("../../static/files/",filename),
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
nuc.atoms <- nuc[seq(1,(nrow(nuc)-1)),12]
# Make a table with the total number of atoms of each type.
nuc.table <- table(nuc.atoms)
nuc.table
# Change to a data frame.
nuc.df <- as.data.frame(nuc.table)
# Add a 3rd column that is the atomic mass of each element.
nuc.df2 <- cbind(nuc.df, MW = PeriodicTable::mass(nuc.df[1:nrow(nuc.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
nuc.df3 <- cbind(nuc.df2, MW.tot = nuc.df2[,2] * nuc.df2[,3])
nuc.df3
sum(nuc.df3[,"MW.tot"])
}
nucMolarMass("adenine.pdf")
library(tidyverse)
library(PeriodicTable)
nucMolarMass <- function(filename)
{
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
nuc <- read_table2(file = paste0("../../static/files/",filename),
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
nuc.atoms <- nuc[seq(1,(nrow(nuc)-1)),12]
# Make a table with the total number of atoms of each type.
nuc.table <- table(nuc.atoms)
nuc.table
# Change to a data frame.
nuc.df <- as.data.frame(nuc.table)
# Add a 3rd column that is the atomic mass of each element.
nuc.df2 <- cbind(nuc.df, MW = PeriodicTable::mass(nuc.df[1:nrow(nuc.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
nuc.df3 <- cbind(nuc.df2, MW.tot = nuc.df2[,2] * nuc.df2[,3])
nuc.df3
sum(nuc.df3[,"MW.tot"])
}
setwd("/home/chrisgaby/github/My_Website/")
nucMolarMass("adenine.pdf")
library(tidyverse)
library(PeriodicTable)
nucMolarMass <- function(filename)
{
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
nuc <- read_table2(file = paste0("../../static/files/",filename),
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
nuc.atoms <- nuc[seq(1,(nrow(nuc)-1)),12]
# Make a table with the total number of atoms of each type.
nuc.table <- table(nuc.atoms)
nuc.table
# Change to a data frame.
nuc.df <- as.data.frame(nuc.table)
# Add a 3rd column that is the atomic mass of each element.
nuc.df2 <- cbind(nuc.df, MW = PeriodicTable::mass(nuc.df[1:nrow(nuc.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
nuc.df3 <- cbind(nuc.df2, MW.tot = nuc.df2[,2] * nuc.df2[,3])
nuc.df3
sum(nuc.df3[,"MW.tot"])
}
setwd("/home/chrisgaby/github/My_Website/")
nucMolarMass("adenine.pdb")
library(tidyverse)
library(PeriodicTable)
nucMolarMass <- function(filename)
{
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
nuc <- read_table2(file = paste0("./static/files/",filename),
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
nuc.atoms <- nuc[seq(1,(nrow(nuc)-1)),12]
# Make a table with the total number of atoms of each type.
nuc.table <- table(nuc.atoms)
nuc.table
# Change to a data frame.
nuc.df <- as.data.frame(nuc.table)
# Add a 3rd column that is the atomic mass of each element.
nuc.df2 <- cbind(nuc.df, MW = PeriodicTable::mass(nuc.df[1:nrow(nuc.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
nuc.df3 <- cbind(nuc.df2, MW.tot = nuc.df2[,2] * nuc.df2[,3])
nuc.df3
sum(nuc.df3[,"MW.tot"])
}
setwd("/home/chrisgaby/github/My_Website/")
nucMolarMass("adenine.pdb")
print(paste("The molar mass for adenine is", A.MM))
A.MM <- nucMolarMass("adenine.pdb")
library(tidyverse)
library(PeriodicTable)
nucMolarMass <- function(filename)
{
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
nuc <- read_table2(file = paste0("./static/files/",filename),
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
nuc.atoms <- nuc[seq(1,(nrow(nuc)-1)),12]
# Make a table with the total number of atoms of each type.
nuc.table <- table(nuc.atoms)
nuc.table
# Change to a data frame.
nuc.df <- as.data.frame(nuc.table)
# Add a 3rd column that is the atomic mass of each element.
nuc.df2 <- cbind(nuc.df, MW = PeriodicTable::mass(nuc.df[1:nrow(nuc.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
nuc.df3 <- cbind(nuc.df2, MW.tot = nuc.df2[,2] * nuc.df2[,3])
nuc.df3
sum(nuc.df3[,"MW.tot"])
}
setwd("/home/chrisgaby/github/My_Website/")
A.MM <- nucMolarMass("adenine.pdb")
print(paste("The molar mass for adenine is", A.MM))
library(tidyverse)
library(PeriodicTable)
nucMolarMass <- function(filename)
{
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
nuc <- read_table2(file = paste0("./static/files/",filename),
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
nuc.atoms <- nuc[seq(1,(nrow(nuc)-1)),12]
# Make a table with the total number of atoms of each type.
nuc.table <- table(nuc.atoms)
nuc.table
# Change to a data frame.
nuc.df <- as.data.frame(nuc.table)
# Add a 3rd column that is the atomic mass of each element.
nuc.df2 <- cbind(nuc.df, MW = PeriodicTable::mass(nuc.df[1:nrow(nuc.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
nuc.df3 <- cbind(nuc.df2, MW.tot = nuc.df2[,2] * nuc.df2[,3])
nuc.df3
sum(nuc.df3[,"MW.tot"])
}
# Set the working directory to prevent issues with file input.
setwd("/home/chrisgaby/github/My_Website/")
# Print the adenine molar mass.
T.MM <- nucMolarMass("thymine.pdb")
print(paste("The molar mass for thymine is", T.MM))
# Print the guanine molar mass.
G.MM <- nucMolarMass("guanine.pdb")
print(paste("The molar mass for guanine is", G.MM))
# Print the cytosine molar mass.
C.MM <- nucMolarMass("cytosine.pdb")
print(paste("The molar mass for cytosine is", C.MM))
library(tidyverse)
library(PeriodicTable)
nucMolarMass <- function(filename)
{
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
nuc <- read_table2(file = paste0("./static/files/",filename),
col_names = FALSE,
skip = 1)
# Remove the last row that only contains "end".
nuc.atoms <- nuc[seq(1,(nrow(nuc)-1)),12]
# Make a table with the total number of atoms of each type.
nuc.table <- table(nuc.atoms)
# Change to a data frame.
nuc.df <- as.data.frame(nuc.table)
# Add a 3rd column that is the atomic mass of each element.
nuc.df2 <- cbind(nuc.df, MW = PeriodicTable::mass(nuc.df[1:nrow(nuc.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
nuc.df3 <- cbind(nuc.df2, MW.tot = nuc.df2[,2] * nuc.df2[,3])
sum(nuc.df3[,"MW.tot"])
}
# Set the working directory to prevent issues with file input.
setwd("/home/chrisgaby/github/My_Website/")
# Print the adenine molar mass.
T.MM <- nucMolarMass("thymine.pdb")
print(paste("The molar mass for thymine is", T.MM))
# Print the guanine molar mass.
G.MM <- nucMolarMass("guanine.pdb")
print(paste("The molar mass for guanine is", G.MM))
# Print the cytosine molar mass.
C.MM <- nucMolarMass("cytosine.pdb")
print(paste("The molar mass for cytosine is", C.MM))
library(ggplot2)
library(tidyverse)
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "prokaryotes.csv")
# Display the minimum, maximum, mean, median, and 1st and 3rd quartiles for the genome sizes.
summary(prokaryote.genomes.table$`GC%`)
650*1.66054e-24
(650*1.66054e-24)*4000000
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
CG <- read_table2(file = "../../static/files/c-g_b.pdb",
col_names = FALSE,
skip = 1)
CG
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
CG <- read_table2(file = "../../static/files/c-g_b.pdb",
col_names = FALSE,
skip = c(1,2))
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
CG <- read_table2(file = "../../static/files/c-g_b.pdb",
col_names = FALSE,
skip = 2)
CG
# Remove the last row that only contains "end".
CG.atoms <- CG[seq(1,(nrow(CG)-1)),3]
CG.atoms
gsub("([^A-Za-z ])+", "", CG.atoms)
substr(CG.atoms, start = 1, stop = 1)
CG.atoms
substr(CG.atoms, start = 1, stop = 2)
gsub("([^A-Za-z])+", "", CG.atoms)
gsub("([^A-Za-z ])+", "", CG.atoms)
gsub("([^A-Z ])+", "", CG.atoms)
?gsub
gsub("([^A-Z{1} ])+", "", CG.atoms)
gsub("([{:alpha:} ])+", "", CG.atoms)
gsub("([^A-Z ])+", "", CG.atoms)
substr(CG.atoms, 1, 1)
substr(CG.atoms[,1], 1, 1)
class(CG.atoms)
CG.atoms
CG.atoms[,1]
CG.atoms[,2]
CG.atoms[,1]
substr(as.data.frame(CG.atoms[,1]), 1, 1)
substr(as.data.frame(CG.atoms)[,1], 1, 1)
grep("ATOM",CG)
grep("ATOM",rownames(CG))
CG
rownames(CG)
CG[grep("ATOM",rownames(CG)),]
CG[grep("ATOM",rownames(CG)), ]
CG[grep("ATOM",CG$X1, ]
CG[grep("ATOM",CG$X1), ]
# Read the CG base pair PDB file into a tibble. Skip the first 2 rows that
# do not contain the desired data.
CG <- read_table2(file = "../../static/files/c-g_b.pdb",
col_names = FALSE,
skip = 2)
# Only the rows with ATOM in column 1 are the ones that we want
CG.atoms <- CG[grep("ATOM",CG$X1), ]
substr(as.data.frame(CG.atoms)[,1], 1, 1)
substr(as.data.frame(CG.atoms)[,3], 1, 1)
CG.atoms
# Read the CG base pair PDB file into a tibble. Skip the first 2 rows that
# do not contain the desired data.
CG <- read_table2(file = "../../static/files/c-g_b.pdb",
col_names = FALSE,
skip = 2)
# Only the rows with ATOM in column 1 are the ones that we want
CG2 <- CG[grep("ATOM",CG$X1), ]
substr(as.data.frame(CG2)[,3], 1, 1)
library(tidyverse)
# Read the CG base pair PDB file into a tibble. Skip the first 2 rows that
# do not contain the desired data.
CG <- read_table2(file = "../../static/files/c-g_b.pdb",
col_names = FALSE,
skip = 2)
# Only the rows with ATOM in column 1 are the ones that we want
CG2 <- CG[grep("ATOM",CG$X1), ]
CG.atoms<- substr(as.data.frame(CG2)[,3], 1, 1)
# Make a table with the total number of atoms of each type.
CG.table <- table(CG.atoms)
CG.table
library(PeriodicTable)
# Change to a data frame.
CG.df <- as.data.frame(CG.table)
# Add a 3rd column that is the atomic mass of each element.
CG.df2 <- cbind(CG.df, MW = PeriodicTable::mass(CG.df[1:nrow(CG.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
CG.df3 <- cbind(CG.df2, MW.tot = CG.df2[,2] * CG.df2[,3])
CG.df3
sum(CG.df3[,"MW.tot"])
1.66054e-24 * 618.3878
library(tidyverse)
# Read the CG base pair PDB file into a tibble. Skip the first 2 rows that
# do not contain the desired data.
AT <- read_table2(file = "../../static/files/t-a.pdb",
col_names = FALSE,
skip = 2)
# Only the rows with ATOM in column 1 are the ones that we want
AT2 <- AT[grep("ATOM",AT$X1), ]
AT.atoms<- substr(as.data.frame(AT2)[,3], 1, 1)
# Make a table with the total number of atoms of each type.
AT.table <- table(AT.atoms)
AT.table
library(PeriodicTable)
# Change to a data frame.
AT.df <- as.data.frame(AT.table)
# Add a 3rd column that is the atomic mass of each element.
AT.df2 <- cbind(AT.df, MW = PeriodicTable::mass(AT.df[1:nrow(AT.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
AT.df3 <- cbind(AT.df2, MW.tot = AT.df2[,2] * AT.df2[,3])
AT.df3
sum(AT.df3[,"MW.tot"])
# Read the CG base pair PDB file into a tibble. Skip the first 7 rows that
# do not contain the desired data.
DNA <- read_table2(file = "../../static/files/dna.pdb",
col_names = FALSE,
skip = 7)
DNA
# Only the rows with ATOM in column 1 are the ones that we want
DNA2 <- DNA[grep("ATOM",DNA$X1), ]
DNA2
DNA.atoms<- substr(as.data.frame(DNA2)[,3], 1, 1)
library(tidyverse)
# Read the CG base pair PDB file into a tibble. Skip the first 7 rows that
# do not contain the desired data.
DNA <- read_table2(file = "../../static/files/dna.pdb",
col_names = FALSE,
skip = 7)
# Only the rows with ATOM in column 1 are the ones that we want
DNA2 <- DNA[grep("ATOM",DNA$X1), ]
DNA.atoms<- substr(as.data.frame(DNA2)[,3], 1, 1)
# Make a table with the total number of atoms of each type.
DNA.table <- table(DNA.atoms)
DNA.table
setwd("/home/chrisgaby/github/My_Website/")
setwd("/home/chrisgaby/github/My_Website/")
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "/static/files/prokaryotes.csv")
library(ggplot2)
library(tidyverse)
setwd("/home/chrisgaby/github/My_Website/")
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "/static/files/prokaryotes.csv")
library(ggplot2)
library(tidyverse)
setwd("/home/chrisgaby/github/My_Website/")
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "./static/files/prokaryotes.csv")
# Display the minimum, maximum, mean, median, and 1st and 3rd quartiles for the genome sizes.
summary(prokaryote.genomes.table$`GC%`)
library(ggplot2)
qplot(data = prokaryote.genomes.table,
x = `GC%`,
binwidth = 1)
library(ggplot2)
# Split the Organism Groups column into new columns named according to their respective taxonomy level
prokaryote.genomes.table.split <- separate(data=prokaryote.genomes.table,
col = `Organism Groups`,
sep = ";",
into = c("Domain", "Phylum", "Class"))
phyla.subset.names <- names(which(summary(factor(prokaryote.genomes.table.split$Phylum)) > 90))
prokaryote.genomes.table.split.reduced <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == phyla.subset.names[1] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[2] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[3] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[4] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[5] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[6],]
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = Phylum,
fill = Phylum,
alpha = I(0.2))
library(ggplot2)
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = Phylum,
fill = Phylum,
facets = Phylum ~ .)
blogdown::serve_site()
blogdown::serve_site()
blogdown::new_post(title = "Prokaryotic Genome GC Content", kind = 'post', author = "John Christian Gaby", ext = '.Rmd')
blogdown::serve_site()
