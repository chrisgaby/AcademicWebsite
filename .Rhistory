CG <- read_table2(file = "../../static/files/c-g_b.pdb",
col_names = FALSE,
skip = c(1,2))
# Read the adenine PDB file into a tibble, skipping the first row
# that causes the column of interest to be missed.
CG <- read_table2(file = "../../static/files/c-g_b.pdb",
col_names = FALSE,
skip = 2)
CG
# Remove the last row that only contains "end".
CG.atoms <- CG[seq(1,(nrow(CG)-1)),3]
CG.atoms
gsub("([^A-Za-z ])+", "", CG.atoms)
substr(CG.atoms, start = 1, stop = 1)
CG.atoms
substr(CG.atoms, start = 1, stop = 2)
gsub("([^A-Za-z])+", "", CG.atoms)
gsub("([^A-Za-z ])+", "", CG.atoms)
gsub("([^A-Z ])+", "", CG.atoms)
?gsub
gsub("([^A-Z{1} ])+", "", CG.atoms)
gsub("([{:alpha:} ])+", "", CG.atoms)
gsub("([^A-Z ])+", "", CG.atoms)
substr(CG.atoms, 1, 1)
substr(CG.atoms[,1], 1, 1)
class(CG.atoms)
CG.atoms
CG.atoms[,1]
CG.atoms[,2]
CG.atoms[,1]
substr(as.data.frame(CG.atoms[,1]), 1, 1)
substr(as.data.frame(CG.atoms)[,1], 1, 1)
grep("ATOM",CG)
grep("ATOM",rownames(CG))
CG
rownames(CG)
CG[grep("ATOM",rownames(CG)),]
CG[grep("ATOM",rownames(CG)), ]
CG[grep("ATOM",CG$X1, ]
CG[grep("ATOM",CG$X1), ]
# Read the CG base pair PDB file into a tibble. Skip the first 2 rows that
# do not contain the desired data.
CG <- read_table2(file = "../../static/files/c-g_b.pdb",
col_names = FALSE,
skip = 2)
# Only the rows with ATOM in column 1 are the ones that we want
CG.atoms <- CG[grep("ATOM",CG$X1), ]
substr(as.data.frame(CG.atoms)[,1], 1, 1)
substr(as.data.frame(CG.atoms)[,3], 1, 1)
CG.atoms
# Read the CG base pair PDB file into a tibble. Skip the first 2 rows that
# do not contain the desired data.
CG <- read_table2(file = "../../static/files/c-g_b.pdb",
col_names = FALSE,
skip = 2)
# Only the rows with ATOM in column 1 are the ones that we want
CG2 <- CG[grep("ATOM",CG$X1), ]
substr(as.data.frame(CG2)[,3], 1, 1)
library(tidyverse)
# Read the CG base pair PDB file into a tibble. Skip the first 2 rows that
# do not contain the desired data.
CG <- read_table2(file = "../../static/files/c-g_b.pdb",
col_names = FALSE,
skip = 2)
# Only the rows with ATOM in column 1 are the ones that we want
CG2 <- CG[grep("ATOM",CG$X1), ]
CG.atoms<- substr(as.data.frame(CG2)[,3], 1, 1)
# Make a table with the total number of atoms of each type.
CG.table <- table(CG.atoms)
CG.table
library(PeriodicTable)
# Change to a data frame.
CG.df <- as.data.frame(CG.table)
# Add a 3rd column that is the atomic mass of each element.
CG.df2 <- cbind(CG.df, MW = PeriodicTable::mass(CG.df[1:nrow(CG.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
CG.df3 <- cbind(CG.df2, MW.tot = CG.df2[,2] * CG.df2[,3])
CG.df3
sum(CG.df3[,"MW.tot"])
1.66054e-24 * 618.3878
library(tidyverse)
# Read the CG base pair PDB file into a tibble. Skip the first 2 rows that
# do not contain the desired data.
AT <- read_table2(file = "../../static/files/t-a.pdb",
col_names = FALSE,
skip = 2)
# Only the rows with ATOM in column 1 are the ones that we want
AT2 <- AT[grep("ATOM",AT$X1), ]
AT.atoms<- substr(as.data.frame(AT2)[,3], 1, 1)
# Make a table with the total number of atoms of each type.
AT.table <- table(AT.atoms)
AT.table
library(PeriodicTable)
# Change to a data frame.
AT.df <- as.data.frame(AT.table)
# Add a 3rd column that is the atomic mass of each element.
AT.df2 <- cbind(AT.df, MW = PeriodicTable::mass(AT.df[1:nrow(AT.df),1]))
# Add a 4th column that is the total molecular weight of each element
# in the nucleotide base molecule. This is the product of the atomic
# mass and the number of atoms of each element.
AT.df3 <- cbind(AT.df2, MW.tot = AT.df2[,2] * AT.df2[,3])
AT.df3
sum(AT.df3[,"MW.tot"])
# Read the CG base pair PDB file into a tibble. Skip the first 7 rows that
# do not contain the desired data.
DNA <- read_table2(file = "../../static/files/dna.pdb",
col_names = FALSE,
skip = 7)
DNA
# Only the rows with ATOM in column 1 are the ones that we want
DNA2 <- DNA[grep("ATOM",DNA$X1), ]
DNA2
DNA.atoms<- substr(as.data.frame(DNA2)[,3], 1, 1)
library(tidyverse)
# Read the CG base pair PDB file into a tibble. Skip the first 7 rows that
# do not contain the desired data.
DNA <- read_table2(file = "../../static/files/dna.pdb",
col_names = FALSE,
skip = 7)
# Only the rows with ATOM in column 1 are the ones that we want
DNA2 <- DNA[grep("ATOM",DNA$X1), ]
DNA.atoms<- substr(as.data.frame(DNA2)[,3], 1, 1)
# Make a table with the total number of atoms of each type.
DNA.table <- table(DNA.atoms)
DNA.table
setwd("/home/chrisgaby/github/My_Website/")
setwd("/home/chrisgaby/github/My_Website/")
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "/static/files/prokaryotes.csv")
library(ggplot2)
library(tidyverse)
setwd("/home/chrisgaby/github/My_Website/")
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "/static/files/prokaryotes.csv")
library(ggplot2)
library(tidyverse)
setwd("/home/chrisgaby/github/My_Website/")
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "./static/files/prokaryotes.csv")
# Display the minimum, maximum, mean, median, and 1st and 3rd quartiles for the genome sizes.
summary(prokaryote.genomes.table$`GC%`)
library(ggplot2)
qplot(data = prokaryote.genomes.table,
x = `GC%`,
binwidth = 1)
library(ggplot2)
# Split the Organism Groups column into new columns named according to their respective taxonomy level
prokaryote.genomes.table.split <- separate(data=prokaryote.genomes.table,
col = `Organism Groups`,
sep = ";",
into = c("Domain", "Phylum", "Class"))
phyla.subset.names <- names(which(summary(factor(prokaryote.genomes.table.split$Phylum)) > 90))
prokaryote.genomes.table.split.reduced <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == phyla.subset.names[1] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[2] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[3] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[4] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[5] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[6],]
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = Phylum,
fill = Phylum,
alpha = I(0.2))
library(ggplot2)
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = Phylum,
fill = Phylum,
facets = Phylum ~ .)
blogdown::serve_site()
blogdown::serve_site()
blogdown::new_post(title = "Prokaryotic Genome GC Content", kind = 'post', author = "John Christian Gaby", ext = '.Rmd')
blogdown::serve_site()
library(ggplot2)
library(tidyverse)
setwd("/home/chrisgaby/github/My_Website/")
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "./static/files/prokaryotes.csv")
# Display the minimum, maximum, mean, median, and 1st and 3rd quartiles for the genome sizes.
summary(prokaryote.genomes.table$`GC%`)
library(ggplot2)
qplot(data = prokaryote.genomes.table,
x = `GC%`,
binwidth = 1)
library(ggplot2)
# Split the Organism Groups column into new columns named according to their respective taxonomy level
prokaryote.genomes.table.split <- separate(data=prokaryote.genomes.table,
col = `Organism Groups`,
sep = ";",
into = c("Domain", "Phylum", "Class"))
phyla.subset.names <- names(which(summary(factor(prokaryote.genomes.table.split$Phylum)) > 90))
prokaryote.genomes.table.split.reduced <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == phyla.subset.names[1] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[2] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[3] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[4] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[5] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[6],]
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = Phylum,
fill = Phylum,
alpha = I(0.2))
library(ggplot2)
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = Phylum,
fill = Phylum,
facets = Phylum ~ .)
prokaryote.genomes.table.split$Phylum == phyla.subset.names[4]
prokaryote.genomes.table.split$Phylum == "PVC group"
prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "PVC group"]
prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "PVC group",]
prokaryote.genomes.table.split$Class[prokaryote.genomes.table.split$Phylum == "PVC group",]
prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "PVC group","Class"]
summary(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "PVC group","Class"])
factor(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "PVC group","Class"])
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "PVC group","Class"])
library(ggplot2)
library(tidyverse)
?source
blogdown::serve_site()
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "PVC group","Class"])
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "Terrabacteria","Class"])
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "Terrabacteria group","Class"])
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "Terrabacteria group",])
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Actinobacteria",])
length(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Actinobacteria",])
nrows(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Actinobacteria",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Actinobacteria",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Firmicutes",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Tenericutes",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Cyanobacteria/Melainabacteria group",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Tenericutes",])
prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Actinobacteria" |
prokaryote.genomes.table.split$Class == "Actinobacteria",]
prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Actinobacteria" |
prokaryote.genomes.table.split$Class == "Firmicutes",]
prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Actinobacteria" |
prokaryote.genomes.table.split$Class == "Firmicutes" |
prokaryote.genomes.table.split$Class == "Cyanobacteria/Melainabacteria group" |
prokaryote.genomes.table.split$Class == "Tenericutes",]
Terra.4phyla.df <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Actinobacteria" |
prokaryote.genomes.table.split$Class == "Firmicutes" |
prokaryote.genomes.table.split$Class == "Cyanobacteria/Melainabacteria group" |
prokaryote.genomes.table.split$Class == "Tenericutes",]
# Create a Terrabacteria dataframe with only the 4 phyla haveing over 100 datapoints.
Terra.4phyla.df <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Actinobacteria" |
prokaryote.genomes.table.split$Class == "Firmicutes" |
prokaryote.genomes.table.split$Class == "Cyanobacteria/Melainabacteria group" |
prokaryote.genomes.table.split$Class == "Tenericutes",]
# Create the plot faceted by phylum.
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = Class,
fill = Class,
facets = Class ~ .)
# Create a Terrabacteria dataframe with only the 4 phyla haveing over 100 datapoints.
Terra.4phyla.df <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Actinobacteria" |
prokaryote.genomes.table.split$Class == "Firmicutes" |
prokaryote.genomes.table.split$Class == "Cyanobacteria/Melainabacteria group" |
prokaryote.genomes.table.split$Class == "Tenericutes",]
# Create the plot faceted by phylum.
qplot(data=Terra.4phyla.df,
x = `GC%`,
geom = "density",
color = Class,
fill = Class,
facets = Class ~ .)
median(prokaryote.genomes.table.split$`GC%`[prokaryote.genomes.table.split$Class == "Firmicutes"]
)
mode(prokaryote.genomes.table.split$`GC%`[prokaryote.genomes.table.split$Class == "Firmicutes"]
)
mediam(prokaryote.genomes.table.split$`GC%`[prokaryote.genomes.table.split$Class == "Firmicutes"])
median(prokaryote.genomes.table.split$`GC%`[prokaryote.genomes.table.split$Class == "Firmicutes"])
blogdown::serve_site()
unique(prokaryote.genomes.table.split$Phylum == "Spirochaetes")
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "Spirochaetes",])
unique(prokaryote.genomes.table.split$Class[prokaryote.genomes.table.split$Phylum == "Spirochaetes",])
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "Spirochaetes","Class"])
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "Spirochaetes","Family"])
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "Spirochaetes","Class"])
prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "Spirochaetes","Class"]
prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "PVC group","Class"]
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "PVC group","Class"])
# The number of rows for each phylum indicates the number of datapoints for each phylum
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Chlamydiae",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Verrucomicrobia",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Planctomycetes",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Lentisphaerae",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Class == "Kiritimatiellaeota",])
prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "PVC group","Class"]
prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == "PVC group","Phylum"]
prokaryote.genomes.table.split[prokaryote.genomes.table.split$`#Organism Name` == "Klebsiella",]
prokaryote.genomes.table.split[prokaryote.genomes.table.split$`#Organism Name` == "Klebsiella pneumoniae",]
head(prokaryote.genomes.table.split)
head(prokaryote.genomes.table.split)[1,1]
head(prokaryote.genomes.table.split)[2,1]
head(prokaryote.genomes.table.split)[3,1]
head(prokaryote.genomes.table.split)[4,1]
grep(prokaryote.genomes.table.split$`#Organism Name`,"Lactobacillus")
?grep
grep("Lacto", prokaryote.genomes.table.split$`#Organism Name`)
grep("Lactobacillus", prokaryote.genomes.table.split$`#Organism Name`)
grep("Lactobacillus", prokaryote.genomes.table.split$`#Organism Name`, value = TRUE)
grep("Eschericia", prokaryote.genomes.table.split$`#Organism Name`, value = TRUE)
grep("Escherichia", prokaryote.genomes.table.split$`#Organism Name`, value = TRUE)
grep("coli", prokaryote.genomes.table.split$`#Organism Name`, value = TRUE)
grep("Klebsiella", prokaryote.genomes.table.split$`#Organism Name`, value = TRUE)
grep("Azotobacter", prokaryote.genomes.table.split$`#Organism Name`, value = TRUE)
grep("Bradyrhizobium", prokaryote.genomes.table.split$`#Organism Name`, value = TRUE)
# Display the taxa within Terrabacteria.
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum ==
"Terrabacteria group","Class"])
?qplot
# Split the Organism Groups column into new columns named according to their
# respective taxonomy level, abbreviated TL1, TL2, and TL3.
prokaryote.genomes.table.split <- separate(data=prokaryote.genomes.table,
col = `Organism Groups`,
sep = ";",
into = c("TL1", "TL2", "TL3"))
phyla.subset.names <- names(which(summary(factor(prokaryote.genomes.table.split$Phylum)) > 90))
prokaryote.genomes.table.split.reduced <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == phyla.subset.names[1] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[2] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[3] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[4] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[5] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[6],]
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = Phylum,
fill = Phylum,
alpha = I(0.2))
# Split the Organism Groups column into new columns named according to their
# respective taxonomy level, abbreviated TL1, TL2, and TL3.
prokaryote.genomes.table.split <- separate(data=prokaryote.genomes.table,
col = `Organism Groups`,
sep = ";",
into = c("TL1", "TL2", "TL3"))
phyla.subset.names <- names(which(summary(factor(prokaryote.genomes.table.split$Phylum)) > 90))
prokaryote.genomes.table.split.reduced <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == phyla.subset.names[1] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[2] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[3] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[4] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[5] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[6],]
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = TL2,
fill = TL2,
alpha = I(0.2))
# Split the Organism Groups column into new columns named according to their
# respective taxonomy level, abbreviated TL1, TL2, and TL3.
prokaryote.genomes.table.split <- separate(data=prokaryote.genomes.table,
col = `Organism Groups`,
sep = ";",
into = c("TL1", "TL2", "TL3"))
phyla.subset.names <- names(which(summary(factor(prokaryote.genomes.table.split$Phylum)) > 90))
prokaryote.genomes.table.split.reduced <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$Phylum == phyla.subset.names[1] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[2] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[3] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[4] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[5] |
prokaryote.genomes.table.split$Phylum == phyla.subset.names[6],]
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = TL2,
fill = TL2,
alpha = I(0.2))
setwd("/home/chrisgaby/github/My_Website/")
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "./static/files/prokaryotes.csv")
# Display the minimum, maximum, mean, median, and 1st and 3rd quartiles
# for the genome sizes.
summary(prokaryote.genomes.table$`GC%`)
qplot(data = prokaryote.genomes.table,
x = `GC%`,
binwidth = 1)
# Split the Organism Groups column into new columns named according to their
# respective taxonomy level, abbreviated TL1, TL2, and TL3.
prokaryote.genomes.table.split <- separate(data=prokaryote.genomes.table,
col = `Organism Groups`,
sep = ";",
into = c("TL1", "TL2", "TL3"))
TL2.subset.names <- names(which(summary(factor(prokaryote.genomes.table.split$TL2)) > 90))
prokaryote.genomes.table.split.reduced <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL2 == TL2.subset.names[1] |
prokaryote.genomes.table.split$TL2 == TL2.subset.names[2] |
prokaryote.genomes.table.split$TL2 == TL2.subset.names[3] |
prokaryote.genomes.table.split$TL2 == TL2.subset.names[4] |
prokaryote.genomes.table.split$TL2 == TL2.subset.names[5] |
prokaryote.genomes.table.split$TL2 == TL2.subset.names[6],]
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = TL2,
fill = TL2,
alpha = I(0.2))
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = TL2,
fill = TL2,
facets = TL2 ~ .)
# Display the taxa within Terrabacteria.
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL2 ==
"Terrabacteria group","TL3"])
library(ggplot2)
library(tidyverse)
setwd("/home/chrisgaby/github/My_Website/")
# Read the table into a tibble.
prokaryote.genomes.table <- read_csv(file = "./static/files/prokaryotes.csv")
# Display the minimum, maximum, mean, median, and 1st and 3rd quartiles
# for the genome sizes.
summary(prokaryote.genomes.table$`GC%`)
qplot(data = prokaryote.genomes.table,
x = `GC%`,
binwidth = 1)
# Split the Organism Groups column into new columns named according to their
# respective taxonomy level, abbreviated TL1, TL2, and TL3.
prokaryote.genomes.table.split <- separate(data=prokaryote.genomes.table,
col = `Organism Groups`,
sep = ";",
into = c("TL1", "TL2", "TL3"))
TL2.subset.names <- names(which(summary(factor(prokaryote.genomes.table.split$TL2)) > 90))
prokaryote.genomes.table.split.reduced <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL2 == TL2.subset.names[1] |
prokaryote.genomes.table.split$TL2 == TL2.subset.names[2] |
prokaryote.genomes.table.split$TL2 == TL2.subset.names[3] |
prokaryote.genomes.table.split$TL2 == TL2.subset.names[4] |
prokaryote.genomes.table.split$TL2 == TL2.subset.names[5] |
prokaryote.genomes.table.split$TL2 == TL2.subset.names[6],]
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = TL2,
fill = TL2,
alpha = I(0.2))
qplot(data=prokaryote.genomes.table.split.reduced,
x = `GC%`,
geom = "density",
color = TL2,
fill = TL2,
facets = TL2 ~ .)
# Display the taxa within Terrabacteria.
unique(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL2 ==
"Terrabacteria group","TL3"])
# The number of rows for each phylum indicates the number of datapoints
# for each phylum
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 ==
"Actinobacteria",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 ==
"Firmicutes",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 ==
"Cyanobacteria/Melainabacteria group",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 ==
"Tenericutes",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 ==
"Deinococcus-Thermus",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 ==
"Chloroflexi",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 ==
"unclassified Terrabacteria group",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 ==
"Armatimonadetes",])
nrow(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 ==
"Abditibacteriota",])
# Create a Terrabacteria dataframe with only the 4 phyla haveing over 100 datapoints.
Terra.4TL2.df <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 == "Actinobacteria" |
prokaryote.genomes.table.split$TL3 == "Firmicutes" |
prokaryote.genomes.table.split$TL3 == "Cyanobacteria/Melainabacteria group" |
prokaryote.genomes.table.split$TL3 == "Tenericutes",]
# Create the plot faceted by the information in the TL3 column.
qplot(data=Terra.4TL2.df,
x = `GC%`,
geom = "density",
color = TL3,
fill = TL3,
facets = TL3 ~ .)
prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 == "Actinobacteria"
]
prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 == "Actinobacteria",]
prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 == "Actinobacteria","'GC%'"]
prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 == "Actinobacteria",'GC%']
stdev(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 == "Firmicutes",'GC%'])
sdev(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 == "Firmicutes",'GC%'])
sd(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 == "Firmicutes",'GC%'])
prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 == "Firmicutes",'GC%']
class(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 == "Firmicutes",'GC%'])
as.numeric(prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 == "Firmicutes",'GC%'])
Firm.GC <- prokaryote.genomes.table.split[prokaryote.genomes.table.split$TL3 == "Firmicutes",'GC%']
Firm.GC
Firm.GC <- prokaryote.genomes.table.split$`GC%`[prokaryote.genomes.table.split$TL3 == "Firmicutes",]
Firm.GC <- prokaryote.genomes.table.split$`GC%`[prokaryote.genomes.table.split$TL3 == "Firmicutes"]
Firm.GC
Firm.GC <- prokaryote.genomes.table.split$`GC%`[prokaryote.genomes.table.split$TL3 == "Firmicutes"]
class(Firm.GC)
sd(Firm.GC)
sd(prokaryote.genomes.table.split$`GC%`[prokaryote.genomes.table.split$TL3 == "Firmicutes"])
prokaryote.genomes.table.split$'GC%'[prokaryote.genomes.table.split$TL3 == "Tenericutes"]
sd(prokaryote.genomes.table.split$'GC%'[prokaryote.genomes.table.split$TL3 == "Firmicutes"])
sd(prokaryote.genomes.table.split$'GC%'[prokaryote.genomes.table.split$TL3 == "Tenericutes"])
blogdown::new_post(title = Create a Word List, kind = 'post', author = "John Christian Gaby", ext = '.Rmd')
blogdown::new_post(title = "Create a Word List", kind = 'post', author = "John Christian Gaby", ext = '.Rmd')
blogdown:::serve_site()
